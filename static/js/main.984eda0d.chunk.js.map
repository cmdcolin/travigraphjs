{"version":3,"sources":["RepoForm.js","util.js","App.js","serviceWorker.js","index.js"],"names":["RepoForm","props","onSubmit","onCancel","init","useState","state","setState","repo","start","end","com","evt","preventDefault","htmlFor","name","value","onChange","target","type","checked","onClick","s","filterOutliers","someArray","length","values","concat","sort","a","b","duration","q1","Math","floor","q3","ceil","iqr","maxValue","minValue","filter","x","finished_at","BUILDS_PER_REQUEST","spec","$schema","width","height","mark","data","selection","grid","bind","encoding","y","field","axis","title","timeUnit","scale","nice","color","domain","range","cache","AbortablePromiseCache","QuickLRU","maxSize","fill","requestData","signal","url","headers","tenaciousFetch","ret","ok","Error","status","json","builds","map","m","message","commit","branch","number","getBuilds","counter","root","encodeURIComponent","offset","undefined","blankState","loading","error","downloaded","controller","AbortController","Boolean","window","location","hostname","match","ReactDOM","render","useQueryParams","StringParam","NumberParam","BooleanParam","query","setQuery","useEffect","includes","Headers","get","result","exception","code","console","getData","res","abort","style","VegaLite","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.984eda0d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport function RepoForm(props) {\n  const { onSubmit = () => {}, onCancel = () => {}, init = {} } = props\n  const [state, setState] = useState(init)\n  const { repo = '', start = '', end = '', com = false } = state\n\n  return (\n    <form\n      onSubmit={evt => {\n        evt.preventDefault()\n        onSubmit({ repo, start: +start, end: +end, com })\n      }}\n    >\n      <label htmlFor=\"repo\">Repository name</label>\n      <input\n        name=\"repo\"\n        value={repo}\n        onChange={evt => setState({ ...state, repo: evt.target.value })}\n      />\n\n      <label htmlFor=\"start\">Start build</label>\n      <input\n        name=\"start\"\n        value={start}\n        onChange={evt => setState({ ...state, start: evt.target.value })}\n      />\n\n      <label htmlFor=\"end\">End build</label>\n      <input\n        name=\"end\"\n        value={end}\n        onChange={evt => setState({ ...state, end: evt.target.value })}\n      />\n\n      <label htmlFor=\"com\">Using travis-ci.com (instead of .org)?</label>\n      <input\n        name=\"com\"\n        type=\"checkbox\"\n        checked={com}\n        onChange={evt => setState({ ...state, com: evt.target.checked })}\n      />\n      <button type=\"submit\">Submit</button>\n      <button\n        onClick={evt => {\n          evt.preventDefault()\n          onCancel(evt)\n        }}\n      >\n        Cancel\n      </button>\n      <button\n        onClick={evt => {\n          evt.preventDefault()\n          const s = {\n            repo: 'facebook/create-react-app',\n            start: 0,\n            end: 500,\n            com: false,\n          }\n          setState(s)\n          onSubmit(s)\n        }}\n      >\n        Example\n      </button>\n    </form>\n  )\n}\nRepoForm.propTypes = {\n  init: PropTypes.object,\n  onSubmit: PropTypes.func,\n  onCancel: PropTypes.func,\n}\n","// stackoverflow\nexport function filterOutliers(someArray = [], elt) {\n  if (!someArray.length) return []\n  const values = someArray.concat()\n  values.sort((a, b) => a.duration - b.duration)\n\n  const q1 = values[Math.floor(values.length / 4)].duration\n  const q3 = values[Math.ceil(values.length * (3 / 4))].duration\n  const iqr = q3 - q1\n\n  const maxValue = q3 + iqr * 3\n  const minValue = q1 - iqr * 3\n\n  const filteredValues = values.filter(\n    x => x.duration < maxValue && x.duration > minValue && !!x.finished_at,\n  )\n\n  return filteredValues\n}\nexport function isAbortException(exception) {\n  return (\n    // DOMException\n    exception.name === 'AbortError' ||\n    // standard-ish non-DOM abort exception\n    exception.code === 'ERR_ABORTED' ||\n    // stringified DOMException\n    exception.message === 'AbortError: aborted' ||\n    // stringified standard-ish exception\n    exception.message === 'Error: aborted'\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  useQueryParams,\n  BooleanParam,\n  StringParam,\n  NumberParam,\n} from 'use-query-params'\nimport { VegaLite } from 'react-vega'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport tenaciousFetch from 'tenacious-fetch'\nimport { RepoForm } from './RepoForm'\nimport { filterOutliers, isAbortException } from './util'\nimport './App.css'\n//use for debugging\n//import setFixtures from './set-fixtures'\n//setFixtures()\n\nconst BUILDS_PER_REQUEST = 100\n\nconst spec = {\n  $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n  width: 1000,\n  height: 400,\n  mark: 'point',\n  data: { name: 'values' },\n  selection: {\n    grid: {\n      type: 'interval',\n      bind: 'scales',\n    },\n  },\n  encoding: {\n    y: {\n      field: 'duration',\n      type: 'quantitative',\n      axis: {\n        title: 'Duration (minutes)',\n      },\n    },\n    x: {\n      field: 'finished_at',\n      timeUnit: 'yearmonthdatehoursminutes',\n      type: 'temporal',\n      scale: {\n        nice: 'week', // add some padding/niceness to domain\n      },\n      axis: {\n        title: 'Date',\n      },\n    },\n    color: {\n      field: 'state',\n      type: 'nominal',\n      scale: {\n        domain: ['failed', 'errored', 'canceled', 'passed'],\n        range: ['#d62728', '#ff7f0e', '#5ab43c', '#1f77b4'],\n      },\n    },\n  },\n}\n\nconst cache = new AbortablePromiseCache({\n  cache: new QuickLRU({ maxSize: 1000 }),\n  async fill(requestData, signal) {\n    const { url, headers } = requestData\n    const ret = await tenaciousFetch(url, { headers, signal })\n    if (!ret.ok) {\n      throw new Error(`failed http status ${ret.status}`)\n    }\n    const json = await ret.json()\n    return filterOutliers(\n      json.builds.map(m => ({\n        message: (m.commit || {}).message,\n        branch: (m.branch || {}).name,\n        duration: m.duration / 60,\n        number: m.number,\n        finished_at: m.finished_at,\n        state: m.state,\n      })),\n    )\n  },\n})\n\nfunction getBuilds({ counter, repo, start, end, com }) {\n  //prettier-ignore\n  const root = `https://api.travis-ci.${com ? 'com' : 'org'}/repo/${encodeURIComponent(\n    repo,\n  )}/builds?limit=${BUILDS_PER_REQUEST}`\n  const offset = start + BUILDS_PER_REQUEST * counter\n  const url = `${root}&offset=${offset}&sort_by=id`\n  return offset <= end ? url : undefined\n}\n\nconst blankState = () => {\n  return {\n    loading: null,\n    error: null,\n    downloaded: null,\n    controller: new AbortController(),\n    counter: 0,\n    builds: [],\n  }\n}\nexport default function App() {\n  const [state, setState] = useState(blankState())\n\n  const [query, setQuery] = useQueryParams({\n    repo: StringParam,\n    start: NumberParam,\n    end: NumberParam,\n    com: BooleanParam,\n  })\n  const { counter, controller, builds, loading, downloaded, error } = state\n  useEffect(\n    query => {\n      const { repo, start, end } = query || {}\n      if (repo && !repo.includes('/')) {\n        setState({\n          ...blankState(),\n          error: 'Repo should be in the form user/name',\n        })\n      }\n      if (end <= start) {\n        setState({ ...blankState(), error: 'End should be greater than start' })\n      }\n    },\n    [query],\n  )\n\n  useEffect(() => {\n    async function getData(query) {\n      try {\n        if (loading && query && query.repo) {\n          setState({\n            ...state,\n            loading: `Loading...build ${counter * BUILDS_PER_REQUEST}`,\n          })\n          const url = getBuilds({ ...query, counter })\n          if (url) {\n            const headers = new Headers({ 'Travis-API-Version': '3' })\n            const result = await cache.get(\n              url,\n              { url, headers },\n              controller.signal,\n            )\n            setState({\n              ...state,\n              counter: counter + 1,\n              controller: new AbortController(),\n              builds: builds.concat(result),\n            })\n          } else if (!builds.length) {\n            setState({ ...blankState(), error: 'No builds loaded' })\n          } else {\n            setState({\n              ...state,\n              loading: null,\n              downloaded: builds,\n            })\n          }\n        }\n      } catch (e) {\n        if (!isAbortException(e)) {\n          console.error(e)\n          setState({\n            ...blankState(),\n            error: e.message,\n          })\n        }\n      }\n    }\n    getData(query)\n  }, [loading, query, counter, controller])\n\n  return (\n    <>\n      <h1>travigraph-js - Travis-CI duration graph</h1>\n      <p>\n        Enter a repo name, the start build, and end build to query for. Also\n        specify whether this is on travis-ci.com instead of .org with the\n        checkbox. NOTE: The repository name is case sensitive!\n      </p>\n      <RepoForm\n        init={query}\n        onSubmit={res => {\n          if (loading) {\n            controller.abort()\n          }\n          setQuery(res)\n          setState({\n            ...blankState(),\n            loading: 'Loading...',\n          })\n        }}\n        onCancel={() => {\n          if (loading) {\n            controller.abort()\n          }\n          setState({\n            ...blankState(),\n          })\n        }}\n      />\n      {loading && <p>{loading}</p>}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {downloaded && <VegaLite data={{ values: downloaded }} spec={spec} />}\n      <a href=\"https://github.com/cmdcolin/travigraphjs/\">travigraph@GitHub</a>\n    </>\n  )\n}\n","/* eslint-disable no-undef */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}