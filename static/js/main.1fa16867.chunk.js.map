{"version":3,"sources":["RepoForm.js","util.js","App.js","serviceWorker.js","index.js"],"names":["RepoForm","onSubmit","initialValues","useForm","form","handleSubmit","pristine","submitting","repo","useField","token","com","queue","input","type","id","name","checked","value","disabled","filterOutliers","someArray","length","values","concat","sort","a","b","duration","q1","Math","floor","q3","min","ceil","iqr","maxValue","minValue","filter","x","finished_at","spec","$schema","width","height","mark","tooltip","content","data","selection","grid","bind","encoding","y","field","axis","title","timeUnit","scale","nice","color","domain","range","queueSpec","cache","AbortablePromiseCache","QuickLRU","maxSize","fill","requestData","signal","url","headers","tenaciousFetch","ret","ok","Error","status","json","result","builds","map","m","started_at","commit","committed_at","Date","updated_at","console","log","message","slice","branch","number","commit_sha","sha","compare","compare_url","state","getBuilds","counter","end","root","encodeURIComponent","offset","undefined","getNumBuilds","App","useState","AbortController","controller","setController","useQueryParams","StringParam","start","NumberParam","BooleanParam","query","setQuery","setCounter","error","setError","loading","setLoading","setBuilds","setEnd","h","Authorization","Headers","useEffect","fetch","res","numBuilds","get","JSON","stringify","exception","code","useTravisCI","abort","onCancel","style","VegaLite","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fa16867.chunk.js","sourcesContent":["import React from 'react'\nimport { useForm, useField } from 'react-final-form-hooks'\nimport PropTypes from 'prop-types'\n\nfunction RepoForm({ onSubmit, initialValues }) {\n  const { form, handleSubmit, pristine, submitting } = useForm({\n    onSubmit, // the function to call with your form values upon valid submit\n    initialValues,\n  })\n  const repo = useField('repo', form)\n  const token = useField('token', form)\n  const com = useField('com', form)\n  const queue = useField('queue', form)\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Repo name</label>\n        <input {...repo.input} />\n      </div>\n      <div>\n        <label>Authorization token (only needed for private)</label>\n        <input {...token.input} />\n      </div>\n      <div>\n        <label>On travis-ci.com instead of travis-ci.org?</label>\n        <input\n          type=\"checkbox\"\n          id={com.input.name}\n          checked={com.input.value}\n          {...com.input}\n        />\n      </div>\n      <div>\n        <label>View queue time instead of build duration?</label>\n        <input\n          type=\"checkbox\"\n          id={queue.input.name}\n          checked={queue.input.value}\n          {...queue.input}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={pristine || submitting}>\n        Submit\n      </button>\n    </form>\n  )\n}\nRepoForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.shape({}).isRequired,\n}\n\nexport default RepoForm\n","// stackoverflow\nexport function filterOutliers(someArray = []) {\n  if (!someArray.length) return []\n  const values = someArray.concat()\n  values.sort((a, b) => a.duration - b.duration)\n\n  const q1 = values[Math.floor(values.length / 4)].duration\n  const q3 =\n    values[Math.min(Math.ceil(values.length * (3 / 4)), values.length - 1)]\n      .duration\n  const iqr = q3 - q1\n\n  const maxValue = q3 + iqr * 3\n  const minValue = q1 - iqr * 3\n\n  return values.filter(\n    (x) => x.duration < maxValue && x.duration > minValue && !!x.finished_at\n  )\n}\nexport function isAbortException(exception) {\n  return (\n    // DOMException\n    exception.name === 'AbortError' ||\n    // standard-ish non-DOM abort exception\n    exception.code === 'ERR_ABORTED' ||\n    // stringified DOMException\n    exception.message === 'AbortError: aborted' ||\n    // stringified standard-ish exception\n    exception.message === 'Error: aborted'\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  useQueryParams,\n  BooleanParam,\n  StringParam,\n  NumberParam,\n} from 'use-query-params'\nimport { VegaLite } from 'react-vega'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport tenaciousFetch from 'tenacious-fetch'\nimport RepoForm from './RepoForm'\nimport { filterOutliers, isAbortException } from './util'\n\nconst BUILDS_PER_REQUEST = 100\n\nconst spec = {\n  $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n  width: 1000,\n  height: 400,\n  mark: { type: 'point', tooltip: { content: 'data' } },\n  data: { name: 'values' },\n  selection: {\n    grid: {\n      type: 'interval',\n      bind: 'scales',\n    },\n  },\n  encoding: {\n    y: {\n      field: 'duration',\n      type: 'quantitative',\n      axis: {\n        title: 'Duration (minutes)',\n      },\n    },\n    x: {\n      field: 'finished_at',\n      timeUnit: 'yearmonthdatehoursminutes',\n      type: 'temporal',\n      scale: {\n        nice: 'week', // add some padding/niceness to domain\n      },\n      axis: {\n        title: 'Date',\n      },\n    },\n    color: {\n      field: 'state',\n      type: 'nominal',\n      scale: {\n        domain: ['passed', 'failed', 'errored', 'canceled'],\n        range: ['#39aa56', '#ff7f0e', '#db4545', '#9d9d9d'],\n      },\n    },\n  },\n}\n\nconst queueSpec = {\n  $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n  width: 1000,\n  height: 400,\n  mark: { type: 'point', tooltip: { content: 'data' } },\n  data: { name: 'values' },\n  selection: {\n    grid: {\n      type: 'interval',\n      bind: 'scales',\n    },\n  },\n  encoding: {\n    y: {\n      field: 'queue',\n      type: 'quantitative',\n      axis: {\n        title: 'Queue time (minutes)',\n      },\n    },\n    x: {\n      field: 'finished_at',\n      timeUnit: 'yearmonthdatehoursminutes',\n      type: 'temporal',\n      scale: {\n        nice: 'week', // add some padding/niceness to domain\n      },\n      axis: {\n        title: 'Date',\n      },\n    },\n    color: {\n      field: 'state',\n      type: 'nominal',\n      scale: {\n        domain: ['passed', 'failed', 'errored', 'canceled'],\n        range: ['#39aa56', '#ff7f0e', '#db4545', '#9d9d9d'],\n      },\n    },\n  },\n}\n\nconst cache = new AbortablePromiseCache({\n  cache: new QuickLRU({ maxSize: 1000 }),\n  async fill(requestData, signal) {\n    const { url, headers } = requestData\n    const ret = await tenaciousFetch(url, { headers, signal })\n    if (!ret.ok) {\n      throw new Error(`failed http status ${ret.status}`)\n    }\n    const json = await ret.json()\n    const result = filterOutliers(\n      json.builds.map((m) => {\n        const queue =\n          m.started_at && m.commit.committed_at\n            ? (new Date(m.updated_at || m.started_at) -\n                new Date(m.commit.committed_at)) /\n              60000\n            : 0\n        console.log(m)\n        return {\n          message: (m.commit || {}).message.slice(0, 20),\n          branch: (m.branch || {}).name,\n          duration: m.duration / 60,\n          queue: queue > 500 ? 0 : queue,\n          number: m.number,\n          commit_sha: m.commit.sha,\n          compare: m.commit.compare_url,\n          finished_at: m.finished_at,\n          state: m.state,\n        }\n      })\n    )\n    return result\n  },\n})\n\nfunction getBuilds({ counter, com, repo, end }) {\n  const root = `https://api.travis-ci.${\n    com ? 'com' : 'org'\n  }/repo/${encodeURIComponent(repo)}/builds?limit=${BUILDS_PER_REQUEST}`\n  const offset = BUILDS_PER_REQUEST * counter\n  const url = `${root}&offset=${offset}&sort_by=id`\n  return offset < end ? url : undefined\n}\n\nfunction getNumBuilds({ com, repo }) {\n  return `https://api.travis-ci.${\n    com ? 'com' : 'org'\n  }/repo/${encodeURIComponent(repo)}/builds?limit=1&offset=-1`\n}\n\nfunction useTravisCI(signal, query) {\n  const [counter, setCounter] = useState(0)\n  const [error, setError] = useState()\n  const [loading, setLoading] = useState(\n    query.repo ? 'Loading...' : 'Enter a repo'\n  )\n  const [builds, setBuilds] = useState([])\n  const [end, setEnd] = useState()\n\n  const h = {\n    'Travis-API-Version': '3',\n  }\n  if (query.token) {\n    h.Authorization = 'token ' + query.token\n  }\n  const headers = new Headers(h)\n\n  useEffect(() => {\n    ;(async () => {\n      if (end === undefined && query.repo !== undefined) {\n        const url = getNumBuilds(query)\n\n        const res = await fetch(url, { headers })\n        const builds = (await res.json()).builds\n        if (builds && builds.length) {\n          const numBuilds = +builds[0].number\n          setEnd(numBuilds)\n        }\n      }\n    })()\n  })\n\n  useEffect(() => {\n    ;(async () => {\n      try {\n        if (end !== undefined) {\n          if (query && query.repo) {\n            setLoading(`Loading build ${counter * BUILDS_PER_REQUEST}/${end}`)\n\n            const url = getBuilds({ ...query, counter, end })\n            if (url) {\n              const result = await cache.get(\n                JSON.stringify({ url, headers }),\n                { url, headers },\n                signal\n              )\n              setBuilds(builds.concat(result))\n              setCounter(counter + 1)\n            } else if (!builds.length) {\n              setError('No builds loaded')\n            } else {\n              setLoading(undefined)\n            }\n          }\n        }\n      } catch (e) {\n        if (!isAbortException(e)) {\n          console.error(e)\n          setError(e.message)\n        }\n      }\n    })()\n  }, [loading, query, counter, builds, signal, headers, end])\n\n  return [loading, error, builds]\n}\nexport default function App() {\n  const [controller, setController] = useState(new AbortController())\n  const [query, setQuery] = useQueryParams({\n    repo: StringParam,\n    start: NumberParam,\n    end: NumberParam,\n    com: BooleanParam,\n    queue: BooleanParam,\n    token: StringParam,\n  })\n\n  const [loading, error, builds] = useTravisCI(controller.signal, query)\n  return (\n    <>\n      <h1>travigraph-js - Travis-CI duration graph</h1>\n      <p>\n        Enter a repo name and optionally an authorization token, used for\n        private repos Also specify whether this is on travis-ci.com or\n        travis-ci.org with the checkbox. NOTE: The repository name is case\n        sensitive!\n      </p>\n      <RepoForm\n        initialValues={query}\n        onSubmit={(res) => {\n          if (loading) {\n            controller.abort()\n          }\n          setController(new AbortController())\n          setQuery(res)\n        }}\n        onCancel={() => {\n          if (loading) {\n            controller.abort()\n          }\n        }}\n      />\n      {error ? (\n        <p style={{ color: 'red' }}>{error}</p>\n      ) : loading ? (\n        <p>{loading}</p>\n      ) : (\n        <VegaLite\n          data={{ values: builds }}\n          spec={query.queue ? queueSpec : spec}\n        />\n      )}\n      <a href=\"https://github.com/cmdcolin/travigraphjs/\">travigraph@GitHub</a>\n    </>\n  )\n}\n","/* eslint-disable no-undef */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}