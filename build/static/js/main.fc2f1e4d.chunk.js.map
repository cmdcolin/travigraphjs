{"version":3,"sources":["RepoForm.js","util.js","App.js","serviceWorker.js","index.js"],"names":["onSubmit","initialValues","useForm","form","handleSubmit","pristine","submitting","repo","useField","token","com","input","type","id","name","checked","value","disabled","filterOutliers","someArray","length","values","concat","sort","a","b","duration","q1","Math","floor","q3","ceil","iqr","maxValue","minValue","filter","x","finished_at","BUILDS_PER_REQUEST","spec","$schema","width","height","mark","data","selection","grid","bind","encoding","y","field","axis","title","timeUnit","scale","nice","color","domain","range","cache","AbortablePromiseCache","QuickLRU","maxSize","fill","requestData","signal","url","headers","res","LSCache","get","JSON","stringify","tenaciousFetch","ret","ok","Error","status","json","result","builds","map","m","message","commit","branch","number","state","set","getBuilds","counter","end","root","encodeURIComponent","offset","undefined","getNumBuilds","Boolean","window","location","hostname","match","ReactDOM","render","useState","AbortController","controller","setController","useQueryParams","StringParam","start","NumberParam","BooleanParam","query","setQuery","setCounter","error","setError","loading","setLoading","setBuilds","setEnd","h","Authorization","Headers","useEffect","fetch","numBuilds","exception","code","console","useTravisCI","RepoForm","abort","onCancel","style","VegaLite","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc2f1e4d.chunk.js","sourcesContent":["import React from 'react'\nimport { useForm, useField } from 'react-final-form-hooks'\n\nexport default ({ onSubmit, initialValues }) => {\n  const { form, handleSubmit, pristine, submitting } = useForm({\n    onSubmit, // the function to call with your form values upon valid submit\n    initialValues,\n  })\n  const repo = useField('repo', form)\n  const token = useField('token', form)\n  const com = useField('com', form)\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Repo name</label>\n        <input {...repo.input} />\n      </div>\n      <div>\n        <label>Authorization token (only needed for private)</label>\n        <input {...token.input} />\n      </div>\n      <div>\n        <label>On travis-ci.com instead of travis-ci.org?</label>\n        <input\n          type=\"checkbox\"\n          id={com.input.name}\n          checked={com.input.value}\n          {...com.input}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={pristine || submitting}>\n        Submit\n      </button>\n    </form>\n  )\n}\n","// stackoverflow\nexport function filterOutliers(someArray = []) {\n  if (!someArray.length) return []\n  const values = someArray.concat()\n  values.sort((a, b) => a.duration - b.duration)\n\n  const q1 = values[Math.floor(values.length / 4)].duration\n  const q3 = values[Math.ceil(values.length * (3 / 4))].duration\n  const iqr = q3 - q1\n\n  const maxValue = q3 + iqr * 3\n  const minValue = q1 - iqr * 3\n\n  return values.filter(\n    x => x.duration < maxValue && x.duration > minValue && !!x.finished_at\n  )\n}\nexport function isAbortException(exception) {\n  return (\n    // DOMException\n    exception.name === 'AbortError' ||\n    // standard-ish non-DOM abort exception\n    exception.code === 'ERR_ABORTED' ||\n    // stringified DOMException\n    exception.message === 'AbortError: aborted' ||\n    // stringified standard-ish exception\n    exception.message === 'Error: aborted'\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  useQueryParams,\n  BooleanParam,\n  StringParam,\n  NumberParam,\n} from 'use-query-params'\nimport { VegaLite } from 'react-vega'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\nimport tenaciousFetch from 'tenacious-fetch'\nimport RepoForm from './RepoForm'\nimport { filterOutliers, isAbortException } from './util'\nimport LSCache from 'lscache'\n\nconst BUILDS_PER_REQUEST = 100\n\nconst spec = {\n  $schema: 'https://vega.github.io/schema/vega-lite/v4.json',\n  width: 1000,\n  height: 400,\n  mark: 'point',\n  data: { name: 'values' },\n  selection: {\n    grid: {\n      type: 'interval',\n      bind: 'scales',\n    },\n  },\n  encoding: {\n    y: {\n      field: 'duration',\n      type: 'quantitative',\n      axis: {\n        title: 'Duration (minutes)',\n      },\n    },\n    x: {\n      field: 'finished_at',\n      timeUnit: 'yearmonthdatehoursminutes',\n      type: 'temporal',\n      scale: {\n        nice: 'week', // add some padding/niceness to domain\n      },\n      axis: {\n        title: 'Date',\n      },\n    },\n    color: {\n      field: 'state',\n      type: 'nominal',\n      scale: {\n        domain: ['failed', 'errored', 'canceled', 'passed'],\n        range: ['#d62728', '#ff7f0e', '#5ab43c', '#1f77b4'],\n      },\n    },\n  },\n}\n\nconst cache = new AbortablePromiseCache({\n  cache: new QuickLRU({ maxSize: 1000 }),\n  async fill(requestData, signal) {\n    const { url, headers } = requestData\n    let res = LSCache.get(JSON.stringify(requestData))\n    if (!res) {\n      const ret = await tenaciousFetch(url, { headers, signal })\n      if (!ret.ok) {\n        throw new Error(`failed http status ${ret.status}`)\n      }\n      const json = await ret.json()\n      const result = filterOutliers(\n        json.builds.map(m => ({\n          message: (m.commit || {}).message,\n          branch: (m.branch || {}).name,\n          duration: m.duration / 60,\n          number: m.number,\n          finished_at: m.finished_at,\n          state: m.state,\n        }))\n      )\n      LSCache.set(JSON.stringify(requestData), result)\n      return result\n    }\n    return res\n  },\n})\n\nfunction getBuilds({ counter, com, repo, end }) {\n  const root = `https://api.travis-ci.${\n    com ? 'com' : 'org'\n  }/repo/${encodeURIComponent(repo)}/builds?limit=${BUILDS_PER_REQUEST}`\n  const offset = BUILDS_PER_REQUEST * counter\n  const url = `${root}&offset=${offset}&sort_by=id`\n  return offset < end ? url : undefined\n}\n\nfunction getNumBuilds({ com, repo }) {\n  return `https://api.travis-ci.${\n    com ? 'com' : 'org'\n  }/repo/${encodeURIComponent(repo)}/builds?limit=1&offset=-1`\n}\n\nfunction useTravisCI(signal, query) {\n  const [counter, setCounter] = useState(0)\n  const [error, setError] = useState()\n  const [loading, setLoading] = useState('Enter a repo')\n  const [builds, setBuilds] = useState([])\n  const [end, setEnd] = useState()\n\n  const h = {\n    'Travis-API-Version': '3',\n  }\n  if (query.token) {\n    h.Authorization = 'token ' + query.token\n  }\n  const headers = new Headers(h)\n\n  useEffect(() => {\n    (async () => {\n      if (end === undefined) {\n        const url = getNumBuilds(query)\n\n        const res = await fetch(url, { headers })\n        const builds = (await res.json()).builds\n        if (builds && builds.length) {\n          const numBuilds = +builds[0].number\n          setEnd(numBuilds)\n        }\n      }\n    })()\n  })\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (end !== undefined) {\n          if (query && query.repo) {\n            setLoading(`Loading build ${counter * BUILDS_PER_REQUEST}/${end}`)\n\n            const url = getBuilds({ ...query, counter, end })\n            if (url) {\n              const result = await cache.get(\n                JSON.stringify({ url, headers }),\n                { url, headers },\n                signal\n              )\n              setBuilds(builds.concat(result))\n              setCounter(counter + 1)\n            } else if (!builds.length) {\n              setError('No builds loaded')\n            } else {\n              setLoading(undefined)\n            }\n          }\n        }\n      } catch (e) {\n        if (!isAbortException(e)) {\n          console.error(e)\n          setError(e.message)\n        }\n      }\n    })()\n  }, [loading, query, counter, builds, signal, headers, end])\n\n  return [loading, error, builds]\n}\nexport default function App() {\n  const [controller, setController] = useState(new AbortController())\n  const [query, setQuery] = useQueryParams({\n    repo: StringParam,\n    start: NumberParam,\n    end: NumberParam,\n    com: BooleanParam,\n    token: StringParam,\n  })\n\n  const [loading, error, builds] = useTravisCI(controller.signal, query)\n  return (\n    <>\n      <h1>travigraph-js - Travis-CI duration graph</h1>\n      <p>\n        Enter a repo name and optionally an authorization token, used for private repos\n        Also specify whether this is on travis-ci.com or travis-ci.org with the\n        checkbox. NOTE: The repository name is case sensitive!\n      </p>\n      <RepoForm\n        initialValues={query}\n        onSubmit={res => {\n          if (loading) {\n            controller.abort()\n          }\n          setController(new AbortController())\n          setQuery(res)\n        }}\n        onCancel={() => {\n          if (loading) {\n            controller.abort()\n          }\n        }}\n      />\n      {error ? (\n        <p style={{ color: 'red' }}>{error}</p>\n      ) : loading ? (\n        <p>{loading}</p>\n      ) : (\n        <VegaLite data={{ values: builds }} spec={spec} />\n      )}\n      <a href=\"https://github.com/cmdcolin/travigraphjs/\">travigraph@GitHub</a>\n    </>\n  )\n}\n","/* eslint-disable no-undef */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}